/**
 *  @fileOverview Grace
 */

/* need to use the CSL module to generate the CSL code */
var CSL = xdc.useModule('ti.mcu.msp430.csl.CSL');
var ADC10_B = xdc.useModule('ti.mcu.msp430.csl2.adc.ADC10_B');
var REF = xdc.useModule('ti.mcu.msp430.csl2.ref.REF');
var Timer0_B3 = xdc.useModule('ti.mcu.msp430.csl2.timer.Timer0_B3');
var EUSCI_A0 = xdc.useModule('ti.mcu.msp430.csl2.communication.EUSCI_A0');
var EUSCI_A1 = xdc.useModule('ti.mcu.msp430.csl2.communication.EUSCI_A1');
CSL.configApiVersion = "1.20.00";

/* these modules should be part of every project */
var CS = xdc.useModule('ti.mcu.msp430.csl2.clock.CS');
var WDT_A = xdc.useModule('ti.mcu.msp430.csl2.watchdog.WDT_A');
var System = xdc.useModule('ti.mcu.msp430.csl2.system.System');
var GPIO = xdc.useModule('ti.mcu.msp430.csl.gpio.GPIO');
var InterruptVectors = xdc.useModule('ti.mcu.msp430.csl.interrupt_vectors.InterruptVectors');

/* set stack and heap sizes as appropriate for MSP430 */
Program.sysStack = 0;
Program.stack = 64;
Program.heap = 0;
Program.argSize = 0;

/* Enable global interrupt */
System.srRegs.SR.GIE = System.srDefs.GIE;
CS.clockMode = CS.baseDefs.ClockConfigMode;
CS.csMclkSrcDivider = CS.CS_CLOCK_DIVIDER_1;
CS.csMclkReqEn = CS.MCLKREQEN_OFF;
GPIO.regs.PJSEL0.Bit4 = GPIO.defs.BIT4;
GPIO.regs.PJSEL0.Bit5 = GPIO.defs.BIT5;
CS.regs.XT1CLKHz = 32768.0;
CS.csXt1Drive = CS.XT1DRIVE_0;
CS.csAclkSource = CS.CS_XT1CLK_SELECT;
ADC10_B.adc10bMode = ADC10_B.PowerUserMode;
ADC10_B.adc10bExternalGPIOPin.value[8] = true;
GPIO.regs.P3SEL1.Bit0 = GPIO.defs.BIT0;
GPIO.regs.P3SEL0.Bit0 = GPIO.defs.BIT0;
ADC10_B.adc10bChannelEnableIdx = 12;
ADC10_B.adc10bVRefPositive = ADC10_B.ADC10B_VREFPOS_INT;
ADC10_B.adc10bEnable = true;
REF.refMode = REF.baseDefs.REFBasicMode;
REF.refEnable = true;
REF.refEnableTempSensor = false;
ADC10_B.adc10bCycleHoldTime = ADC10_B.ADC10B_CYCLEHOLD_1024_CYCLES;
ADC10_B.adc10bImpedance = "10000";
CS.csSmclkReqEn = CS.SMCLKREQEN_OFF;
CS.csSmclkSrcDivider = CS.CS_CLOCK_DIVIDER_1;
CS.csAclkSrcDivider = CS.CS_CLOCK_DIVIDER_1;
CSL.device.vcc = 3.3;
Timer0_B3.timerMode = xdc.module("ti.mcu.msp430.csl2.timer.ITimer").IntervalMode;
Timer0_B3.intervalModeActive = true;
Timer0_B3.compareValue[0] = 4095;
Timer0_B3.intervalModeAdvanced = true;
Timer0_B3.regs.interruptSource[1].interruptEnable = true;
Timer0_B3.regs.interruptSource[1].interruptHandler = true;
EUSCI_A0.eusciMode = EUSCI_A0.eusciBaseDefs.UARTMode;
EUSCI_A0.eusciUART.eusciUARTPin[0] = 1;
GPIO.regs.P2SEL1.Bit1 = GPIO.defs.BIT1;
EUSCI_A0.eusciUART.eusciUARTPin[1] = 1;
GPIO.regs.P2SEL1.Bit0 = GPIO.defs.BIT0;
EUSCI_A0.eusciUART.eusciUARTBaudRate = EUSCI_A0.eusciUARTDefs.BaudRate_9;
EUSCI_A1.eusciMode = EUSCI_A1.eusciBaseDefs.UARTMode;
EUSCI_A1.eusciUART.eusciUARTPin[0] = 1;
GPIO.regs.P2SEL1.Bit6 = GPIO.defs.BIT6;
EUSCI_A1.eusciUART.eusciUARTPin[1] = 1;
GPIO.regs.P2SEL1.Bit5 = GPIO.defs.BIT5;
EUSCI_A1.eusciUART.eusciUARTBaudRate = EUSCI_A1.eusciUARTDefs.BaudRate_9;
GPIO.regs.P1DIR.Bit0 = GPIO.defs.BIT0;
GPIO.regs.P1DIR.Bit1 = GPIO.defs.BIT1;
GPIO.regs.P1DIR.Bit2 = GPIO.defs.BIT2;
GPIO.regs.P1DIR.Bit3 = GPIO.defs.BIT3;
GPIO.regs.P1DIR.Bit4 = GPIO.defs.BIT4;
GPIO.regs.P1DIR.Bit5 = GPIO.defs.BIT5;
GPIO.regs.P1DIR.Bit6 = GPIO.defs.BIT6;
GPIO.regs.P1DIR.Bit7 = GPIO.defs.BIT7;
GPIO.regs.P2DIR.Bit3 = GPIO.defs.BIT3;
GPIO.regs.P2OUT.Bit3 = GPIO.defs.BIT3;
GPIO.regs.P2DIR.Bit7 = GPIO.defs.BIT7;
GPIO.regs.P3DIR.Bit1 = GPIO.defs.BIT1;
GPIO.regs.P3DIR.Bit2 = GPIO.defs.BIT2;
GPIO.regs.P3DIR.Bit5 = GPIO.defs.BIT5;
GPIO.regs.P3OUT.Bit5 = GPIO.defs.BIT5;
GPIO.regs.P3DIR.Bit6 = GPIO.defs.BIT6;
GPIO.regs.P3DIR.Bit7 = GPIO.defs.BIT7;
GPIO.regs.PJDIR.Bit0 = GPIO.defs.BIT0;
GPIO.regs.PJSEL0.Bit0 = GPIO.defs.BIT0_OFF;
GPIO.regs.interruptSource[16].interruptHandler = false;
GPIO.regs.interruptSource[17].interruptHandler = false;
GPIO.regs.interruptSource[18].interruptHandler = false;
GPIO.regs.interruptSource[19].interruptHandler = false;
GPIO.regs.interruptSource[20].interruptHandler = false;
GPIO.regs.interruptSource[21].interruptHandler = false;
GPIO.regs.interruptSource[22].interruptHandler = false;
GPIO.regs.interruptSource[23].interruptHandler = false;
GPIO.regs.P3IE.Bit4 = GPIO.defs.BIT4_OFF;
GPIO.regs.P3IES.Bit4 = GPIO.defs.BIT4_OFF;
GPIO.regs.P3IE.Bit3 = GPIO.defs.BIT3_OFF;
GPIO.regs.P3REN.Bit3 = GPIO.defs.BIT3;
GPIO.regs.P3REN.Bit4 = GPIO.defs.BIT4;
GPIO.regs.P3OUT.Bit4 = GPIO.defs.BIT4_OFF;
GPIO.regs.P4DIR.Bit0 = GPIO.defs.BIT0;
GPIO.regs.P4DIR.Bit1 = GPIO.defs.BIT1;
GPIO.regs.PJDIR.Bit1 = GPIO.defs.BIT1;
GPIO.regs.PJDIR.Bit2 = GPIO.defs.BIT2;
GPIO.regs.PJDIR.Bit3 = GPIO.defs.BIT3;
EUSCI_A1.eusciUART.eusciUARTCustomRate = 32768;
EUSCI_A1.eusciUART.eusciUARTClockSource = EUSCI_A1.eusciUARTDefs.eUART_CLOCKSOURCE_SMCLK;
Timer0_B3.inputClockToTimer = 32.768;
WDT_A.showUserModePage = true;
WDT_A.watchdogMode = WDT_A.WatchdogMode;
WDT_A.wdtClkSelect = WDT_A.WDT_CLOCKSOURCE_ACLK;
WDT_A.wdtClkDivider = WDT_A.WDT_CLOCKDIVIDER_8192K;
